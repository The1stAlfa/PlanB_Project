/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import javax.swing.GroupLayout;
import sys.Month;
import javax.swing.JDialog;
import javax.swing.JFrame;
import sys.Terminal;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;

/**
 *
 * @author debryan10
 */
public class EditActionForm extends JDialog {
    private final JFrame parent;
    private final Terminal terminal;
    private final String meeting_name;
    private final Object[] row_data;
    private Object[] row_data_modified;
    private JButton save_button;
    private JComboBox<String> cbDayEnd;
    private JComboBox<String> cbDayReal;
    private JComboBox<String> cbDayStart;
    private JComboBox<String> cbMonthEnd;
    private JComboBox<String> cbMonthReal;
    private JComboBox<String> cbMonthStart;
    private JComboBox<String> cbYearEnd;
    private JComboBox<String> cbYearReal;
    private JComboBox<String> cbYearStart;
    private JButton cancell_button;
    private JComboBox<String> status_comboBox;
    private JLabel days_label;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JSlider progress_slider;
    private JTextArea jTextArea1;
    private JTextArea jTextArea2;
    private JTextField tfDuration;
    private JTextField tfId;
    private JComboBox responsible_comboBox;
    
    /**
     * Creates new form Ingreso
     * @param parent
     * @param terminal
     * @param meeting_name
     * @param row_data
     */
    public EditActionForm(JFrame parent, Terminal terminal, String meeting_name, Object[] row_data) {
        this.parent = parent;
        this.terminal = terminal;
        this.meeting_name = meeting_name;
        this.row_data = row_data;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        parent.setEnabled(false);
        addWindowListener();
        days_label = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        jLabel9 = new JLabel();
        jLabel10 = new JLabel();
        jLabel11 = new JLabel();
        jLabel12 = new JLabel();
        jLabel13 = new JLabel();
        tfId = new JTextField();
        responsible_comboBox = new JComboBox();
        tfDuration = new JTextField();
        save_button = new JButton();
        cancell_button = new JButton();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jScrollPane2 = new JScrollPane();
        jTextArea2 = new JTextArea();
        cbDayStart = new JComboBox<>();
        cbMonthStart = new JComboBox<>();
        cbYearStart = new JComboBox<>();
        cbDayReal = new JComboBox<>();
        cbDayEnd = new JComboBox<>();
        cbMonthEnd = new JComboBox<>();
        cbMonthReal = new JComboBox<>();
        cbYearReal = new JComboBox<>();
        cbYearEnd = new JComboBox<>();
        status_comboBox = new JComboBox<>();
        progress_slider = new JSlider();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Action");
        getContentPane().setBackground(new Color(48, 49, 50));
        
        days_label.setText("days");
        days_label.setForeground(Color.decode("#C9CDD1"));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("ID");
        jLabel2.setForeground(Color.decode("#C9CDD1"));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Detail");
        jLabel3.setForeground(Color.decode("#C9CDD1"));
        jLabel6.setText("Responsible");
        jLabel6.setForeground(Color.decode("#C9CDD1"));
        jLabel7.setText("Comments");
        jLabel7.setForeground(Color.decode("#C9CDD1"));
        jLabel8.setText("<html>Planned<br>Start Date</html>");
        jLabel8.setForeground(Color.decode("#C9CDD1"));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("<html>Planned<br> End Date</html>");
        jLabel9.setForeground(Color.decode("#C9CDD1"));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);   
        jLabel10.setText("<html>Real  <br> End Date</html>");
        jLabel10.setForeground(Color.decode("#C9CDD1"));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("Progress %");
        jLabel11.setForeground(Color.decode("#C9CDD1"));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("Status");
        jLabel12.setForeground(Color.decode("#C9CDD1"));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("Duration");
        jLabel13.setForeground(Color.decode("#C9CDD1"));
        tfDuration.setText("");
        responsible_comboBox.setBackground(Color.decode("#FCFEFC"));
        
        save_button.setText("SAVE");
        save_button.addActionListener((java.awt.event.ActionEvent evt) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            int duration = getDaysBetweenDates(start_date, end_date);
            if(duration <= 0)
                JOptionPane.showMessageDialog(getJDialog(),"Inconsistent Dates.","Error",JOptionPane.ERROR_MESSAGE);
            else{
                try {
                    if(detectActionDataModification()){
                        terminal.modifyAction(row_data_modified,meeting_name);
                        parent.setEnabled(true);
                        getJDialog().dispose();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(AddActionForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        cancell_button.setText("CANCELL");
        cancell_button.addActionListener((java.awt.event.ActionEvent evt) -> {
            parent.setEnabled(true);
            getJDialog().dispose();
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setLineWrap(true);
        jTextArea2.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea2);

        cbDayStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", 
            "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22",
            "23", "24", "25", "26", "27", "28", "29", "30", "31" 
        }));
        cbMonthStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", 
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" 
        }));
        cbYearStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", 
            "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", 
            "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", 
            "2025", "2026", "2027", "2028", "2029", "2030" 
        }));
        cbDayReal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11",
            "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22",
            "23", "24", "25", "26", "27", "28", "29", "30", "31" 
        }));
        cbDayReal.setBackground(Color.decode("#FCFEFC"));
        cbDayEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11",
            "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22",
            "23", "24", "25", "26", "27", "28", "29", "30", "31" 
        }));
        cbMonthEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", 
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" 
        }));
        cbMonthEnd.setBackground(Color.decode("#FCFEFC"));
        cbMonthReal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", 
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" 
        }));
        cbMonthReal.setBackground(Color.decode("#FCFEFC"));
        cbYearReal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", 
            "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", 
            "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", 
            "2025", "2026", "2027", "2028", "2029", "2030" 
        }));
        cbYearReal.setBackground(Color.decode("#FCFEFC"));
        cbYearEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", 
            "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", 
            "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", 
            "2025", "2026", "2027", "2028", "2029", "2030" 
        }));
        status_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { 
            "IN_PROCESS", "OVERDUE", "COMPLETED_APP", "COMPLETED" 
        }));
        status_comboBox.setBackground(Color.decode("#FCFEFC"));
        status_comboBox.setSelectedIndex(1);
        progress_slider.setOpaque(false);
        setTeamMembersNames();
        setRowData();
        cbYearStart.addItemListener((ItemEvent event) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            tfDuration.setText(String.valueOf(getDaysBetweenDates(start_date, end_date)));
        });
        cbYearStart.setBackground(Color.decode("#FCFEFC"));
        cbYearStart.setEnabled(false);
        cbMonthStart.addItemListener((ItemEvent event) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            tfDuration.setText(String.valueOf(getDaysBetweenDates(start_date, end_date)));
        });
        cbMonthStart.setBackground(Color.decode("#FCFEFC"));
        cbMonthStart.setEnabled(false);
        cbDayStart.addItemListener((ItemEvent event) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            tfDuration.setText(String.valueOf(getDaysBetweenDates(start_date, end_date)));
        });
        cbDayStart.setEnabled(false);
        cbDayStart.setBackground(Color.decode("#FCFEFC"));
        cbYearEnd.addItemListener((ItemEvent event) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            tfDuration.setText(String.valueOf(getDaysBetweenDates(start_date, end_date)));
        });
        cbYearEnd.setEnabled(false);
        cbYearEnd.setBackground(Color.decode("#FCFEFC"));
        cbMonthEnd.addItemListener((ItemEvent event) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            tfDuration.setText(String.valueOf(getDaysBetweenDates(start_date, end_date)));
        });
        cbMonthEnd.setBackground(Color.decode("#FCFEFC"));
        cbMonthEnd.setEnabled(false);
        cbDayEnd.addItemListener((ItemEvent event) -> {
            String start_date = getDate(cbYearStart,cbMonthStart,cbDayStart);
            String end_date = getDate(cbYearEnd,cbMonthEnd,cbDayEnd);
            tfDuration.setText(String.valueOf(getDaysBetweenDates(start_date, end_date)));
        });
        cbDayEnd.setBackground(Color.decode("#FCFEFC"));
        cbDayEnd.setEnabled(false);
        tfId.setEditable(false);
        tfId.setBackground(Color.decode("#FCFEFC"));
        
        javax.swing.GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(tfId, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addGap(15, 15, 15)
                                        .addComponent(responsible_comboBox, GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2)
                                    .addComponent(jScrollPane1, GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cbDayReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbMonthReal, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cbYearReal, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cbDayEnd, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbMonthEnd, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbYearEnd, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbDayStart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbMonthStart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbYearStart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel12, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(progress_slider, GroupLayout.PREFERRED_SIZE, 164, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(status_comboBox, GroupLayout.PREFERRED_SIZE, 164, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfDuration, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(days_label))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(save_button, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(cancell_button, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfId, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(responsible_comboBox, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(cbDayStart, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbMonthStart, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbYearStart, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(status_comboBox, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progress_slider, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(save_button)
                            .addComponent(cancell_button)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(cbDayEnd, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMonthEnd, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbYearEnd, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(cbDayReal, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMonthReal,GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbYearReal, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(tfDuration, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addComponent(days_label)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        pack();
        setVisible(true);
    }                        
    
    private void setRowData(){
        tfId.setText(String.valueOf(row_data[0]));
        responsible_comboBox.setSelectedIndex(getResponsibleIndex(row_data[1]));
        jTextArea1.setText(String.valueOf(row_data[2]));
        jTextArea2.setText(String.valueOf(row_data[3]));
        LocalDate start_date = LocalDate.parse(String.valueOf(row_data[4]));
        cbYearStart.setSelectedIndex(searchYearIndex(start_date,cbYearStart));
        cbMonthStart.setSelectedIndex(searchMonthIndex(start_date,cbMonthStart));
        cbDayStart.setSelectedIndex(searchDayIndex(start_date,cbDayStart));
        LocalDate end_date = LocalDate.parse(String.valueOf(row_data[5]));
        cbYearEnd.setSelectedIndex(searchYearIndex(end_date,cbYearEnd));
        cbMonthEnd.setSelectedIndex(searchMonthIndex(end_date,cbMonthEnd));
        cbDayEnd.setSelectedIndex(searchDayIndex(end_date,cbDayEnd));
        if(row_data[6] != null){
            LocalDate real_date = LocalDate.parse(String.valueOf(row_data[6]));
            cbYearReal.setSelectedIndex(searchYearIndex(real_date,cbYearReal));
            cbMonthReal.setSelectedIndex(searchMonthIndex(real_date,cbMonthReal));
            cbDayReal.setSelectedIndex(searchDayIndex(real_date,cbDayReal));
        }
        else{
            cbYearReal.setSelectedIndex(-1);
            cbMonthReal.setSelectedIndex(-1);
            cbDayReal.setSelectedIndex(-1);
        }
        progress_slider.setValue(Integer.parseInt(String.valueOf(row_data[7])));
        String status = String.valueOf(row_data[8]);
        status_comboBox.setSelectedIndex(searchStatusIndex(status));
        tfDuration.setText(String.valueOf(row_data[9]));
    }
    
    private int searchYearIndex(LocalDate date, JComboBox comboBox){
        String year = String.valueOf(date.getYear());
        int length = comboBox.getItemCount();
        for(int index=0;index<length;index++){
            if(comboBox.getItemAt(index).toString().equalsIgnoreCase(year))
                return index;
        }
        return 0;
    }
    
    private int searchMonthIndex(LocalDate date, JComboBox comboBox){
        String month = date.getMonth().toString();
        int length = comboBox.getItemCount();
        for(int index=0;index<length;index++){
            if(comboBox.getItemAt(index).toString().equalsIgnoreCase(getMonthAbbreviation(month)))
                return index;
        }
        return 0;
    }
    
    private int searchDayIndex(LocalDate date, JComboBox comboBox){
        String day = String.valueOf(date.getDayOfMonth());
        if(day.length() == 1)
            day = "0" + day;
        int length = comboBox.getItemCount();
        for(int index=0;index<length;index++){
            if(comboBox.getItemAt(index).toString().equalsIgnoreCase(day))
                return index;
        }
        return 0;
    }
    
    private int searchStatusIndex(String status){
        int length = status_comboBox.getItemCount();
        for(int index=0;index<length;index++){
            if(status_comboBox.getItemAt(index).equalsIgnoreCase(status))
                return index;
        }
        return 0;
    }
    
    private String getMonthName(String abbreviation){
        Month mon[] = Month.values();
        for(Month m:mon){
            if(m.getAbbreviation().equalsIgnoreCase(abbreviation))
                return m.toString();
        }
        return null;
    }
    
    private String getMonthAbbreviation(String month_name){
        Month mon[] = Month.values();
        for(Month m:mon){
            if(m.toString().equalsIgnoreCase(month_name))
                return m.getAbbreviation();
        }
        return null;
    }
    
    private JDialog getJDialog(){
        return this;
    }
    
    private int getDaysBetweenDates(String start, String end){
        return (int)ChronoUnit.DAYS.between(Terminal.parseDate(start),Terminal.parseDate(end));
    }
     
    private String getDate(JComboBox year, JComboBox month, JComboBox day){
        return year.getSelectedItem().toString()+"-"
                +Month.valueOf(getMonthName(month.getSelectedItem().toString())).getValue()
                +"-"+day.getSelectedItem().toString();
    }
    
    private void setTeamMembersNames(){
        responsible_comboBox.setModel(new DefaultComboBoxModel(terminal.getTeamMembersNames(meeting_name)));        
    }
    
    private void addWindowListener(){
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e){}

            @Override
            public void windowClosing(WindowEvent e){
                parent.setEnabled(true);
            }

            @Override
            public void windowClosed(WindowEvent e){}

            @Override
            public void windowIconified(WindowEvent e){}

            @Override
            public void windowDeiconified(WindowEvent e){}

            @Override
            public void windowActivated(WindowEvent e){}

            @Override
            public void windowDeactivated(WindowEvent e){}
        });
    }
    
    private int getResponsibleIndex(Object row_data){
        String responsible_acronym = row_data.toString();
        int length = responsible_comboBox.getItemCount();
        for(int index=0;index<length;index++){
            String acronym = getAcronymName(responsible_comboBox.getItemAt(index).toString());
            if(acronym.equalsIgnoreCase(responsible_acronym))
                return index;
        }
        return -1;
    }
    
    private String getAcronymName(String responsible_names){
        String[] names = responsible_names.split(" ");
        String acronym_name = "";
        for(String name:names)
            acronym_name = acronym_name+name.substring(0,1).toUpperCase();
        return acronym_name;
    }                   
    
    private boolean detectActionDataModification(){
        byte detection = 0;
        row_data_modified = new Object[10];
        row_data_modified[0] = tfId.getText();
        if(responsible_comboBox.getSelectedIndex() != getResponsibleIndex(row_data[1])){
            row_data_modified[1] = responsible_comboBox.getSelectedItem().toString();
            detection += 1;
        }
        else
            row_data_modified[1] = null;
        
        if(!String.valueOf(row_data[2]).equalsIgnoreCase(jTextArea1.getText())){
            row_data_modified[2] = jTextArea1.getText();
            detection += 1;
        }
        else
            row_data_modified[2] = null;
        
        if(!String.valueOf(row_data[3]).equalsIgnoreCase(jTextArea2.getText())){
            row_data_modified[3] = jTextArea2.getText();
            detection += 1;
        }
        else
            row_data_modified[3] = null;
        /*
        if(){
            
        }
        else
            row_data_modified[4] = null;
        
        if(){
            
        }
        else
            row_data_modified[5] = null;
        */
        if(row_data[6] == null){
            if(cbYearReal.getSelectedIndex()!= -1 
                    && cbMonthReal.getSelectedIndex() != -1 
                    && cbDayReal.getSelectedIndex() != -1){
                String date = cbYearReal.getSelectedItem().toString()+"-"
                        +getMonthValue(cbMonthReal.getSelectedItem().toString())+"-"
                        +cbDayReal.getSelectedItem().toString();
                row_data_modified[6] = date;
                detection += 1;
            }
        }//falta cuando la fecha está establecida
        else
            row_data_modified[6] = null;

        if(Integer.parseInt(String.valueOf(row_data[7])) != progress_slider.getValue()){
            row_data_modified[7] = progress_slider.getValue();
            detection += 1;
        }
        else
            row_data_modified[7] = null;
        
        if(!String.valueOf(row_data[8]).equalsIgnoreCase(
                status_comboBox.getSelectedItem().toString())){
            row_data_modified[8] = status_comboBox.getSelectedItem().toString();
            detection += 1;
        }
        else
            row_data_modified[8] = null;
        row_data_modified[4] = null;
        row_data_modified[5] = null;
        row_data_modified[9] = null;
        if(detection != 0)
            return true;
        return false;
    }
    private String getMonthValue(String abbreviation){
         Month mon[] = Month.values();
        for(Month m:mon){
            if(m.getAbbreviation().equalsIgnoreCase(abbreviation))
                return m.getValue();
        }
        return null;
    }
}
